cpu_data <- read.csv("Intel_CPUs.csv")
View(cpu_data)
View(cpu_data)
column_names <- names(cpu_data)
descriptions <- lapply(column_names, function(col) {
attr(cpu_data[[col]], "description")
})
column_info <- data.frame(Column = column_names, Description = unlist(descriptions))
View(descriptions)
del descriptions
rm(descriptions)
products = cpu_data$Product_Collection
unique(products)
count(unique(products))
count(cpu_data)
count(cpu_data)
library(dplyr)
count(cpu_data)
library(dplyr)
library(dplyr)
source(utils.R)
source("utils.R")
results <- extract_tier_and_generation(products)
results
View(results)
View(extract_tier_and_generation)
result_list <- lapply(product_collections, extract_tier_and_generation)
result_list <- lapply(products, extract_tier_and_generation)
View(result_list)
result_list[[1]]
result_list[[31]]
cpu_data <- read.csv("dataset/Intel_CPUs.csv")
gpu_data <- read.csv("dataset/All_GPUs.csv")
gpu_data <- read.csv("dataset/All_GPUs.csv")
products[1]
products[2]
pattern = "[0-9]+(st|nd|rd|th) Generation Intel® Core™ i[3,5,7,9] Processors"
matched_products <- grep(pattern, products, value = TRUE)
matched_products
result_list <- lapply(matched_products, extract_tier_and_generation)
View(result_list)
View(results)
View(result_list)
rm(results)
View(result_list)
View(result_list)
# Custom comparison function
compare_function <- function(obj1, obj2) {
if (obj1$tier == obj2$tier) {
return(as.numeric(gsub("[^0-9]", "", obj1$generation)) - as.numeric(gsub("[^0-9]", "", obj2$generation)))
} else {
return(match(obj1$tier, c("i3", "i5", "i7", "i9")) - match(obj2$tier, c("i3", "i5", "i7", "i9")))
}
}
# Sort the list of objects
sorted_indices <- order(sapply(result_list, function(x) x$tier),
sapply(result_list, function(x) x$generation),
FUN = compare_function)
# Sort the list of objects
sorted_indices <- order(sapply(result_list, function(x) x$tier),
sapply(result_list, function(x) x$generation))
sorted_list <- result_list[sorted_indices]
View(sorted_list)
View(cpu_data)
i3_4th = products[grepl("4th Generation Intel® Core™ i3 Processors", products$Product_Collection)]
i3_4th = grepl("4th Generation Intel® Core™ i3 Processors", products$Product_Collection)
filtered_instances <- subset(products, grepl("4th Generation Intel® Core™ i3 Processors", Product_Collection))
i3_4th <- grepl("4th Generation Intel® Core™ i3 Processors", products$Product_Collection)
i3_4th <- products[grepl("4th Generation Intel® Core™ i3 Processors", products$Product_Collection)]
i3_4th <- subset(cpu_data, Product_Collection == "4th Generation Intel® Core™ i3 Processors")
View(i3_4th)
View(i3_4th)
sorted_on_release <- cpu_data[order(cpu_data$Release_Date), ]
sorted_on_release <- cpu_data[order(cpu_data$Launch_Date), ]
View(sorted_on_release)
View(sorted_on_release)
# Extracting quarter and year
quarters <- substring(cpu_data$Release_Date, 2, 2)
years <- as.integer(substring(cpu_data$Release_Date, 4, 5)) + 2000
# Creating a new column to store the release year and quarter
cpu_data$Release_Year <- years
# Extracting quarter and year
quarters <- substring(cpu_data$Launch_Date, 2, 2)
years <- as.integer(substring(cpu_data$Launch_Date, 4, 5)) + 2000
# Creating a new column to store the release year and quarter
cpu_data$Launch_Year <- years
cpu_data$Launch_Quarter <- quarters
# Converting quarter to numeric for proper sorting
quarter_numeric <- c("Q1" = 1, "Q2" = 2, "Q3" = 3, "Q4" = 4)
cpu_data$Release_Quarter <- quarter_numeric[cpu_data$Release_Quarter]
# Extracting quarter and year
quarters <- substring(cpu_data$Launch_Date, 2, 2)
years <- as.integer(substring(cpu_data$Launch_Date, 4, 5)) + 2000
# Creating a new column to store the release year and quarter
cpu_data$Launch_Year <- years
cpu_data$Launch_Quarter <- quarters
# Converting quarter to numeric for proper sorting
quarter_numeric <- c("Q1" = 1, "Q2" = 2, "Q3" = 3, "Q4" = 4)
cpu_data$Launch_Quarter <- quarter_numeric[cpu_data$Launch_Quarter]
# Sorting the dataset by release year and quarter
sorted_on_release <- cpu_data[order(cpu_data$Launch_Year, cpu_data$Launch_Quarter), ]
View(sorted_on_release)
View(sorted_on_release)
quarters
# Extracting quarter and year
quarters <- as.integer(substring(cpu_data$Launch_Date, 2, 2))
years <- as.integer(substring(cpu_data$Launch_Date, 4, 5)) + 2000
# Creating a new column to store the release year and quarter
cpu_data$Launch_Year <- years
cpu_data$Launch_Quarter <- quarters
quarter_numeric <- c("Q1" = 1, "Q2" = 2, "Q3" = 3, "Q4" = 4)
cpu_data$Launch_Quarter <- quarters
# Sorting the dataset by release year and quarter
sorted_on_release <- cpu_data[order(cpu_data$Launch_Year, cpu_data$Launch_Quarter), ]
View(sorted_on_release)
View(sorted_on_release)
unique_collections = unique(cpu_data$Product_Collection)
length(unique_collections)
unique_collections
