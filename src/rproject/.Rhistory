length(is.na(cpu_data$Product_Collection))
is.na(cpu_data$Product_Collection)
> sum(is.na(cpu_data$Processor_Number))
> sum(is.na(cpu_data$Processor_Number))
sum(is.na(cpu_data$Processor_Number))
sum(nchar(cpu_data$Processor_Number) == 0)
difference <- nrow(cpu_data) - nrow(unique(cpu_data[, c("Product_Collection", "Processor_Number")]))
difference
duplicated_instances <- cpu_data[duplicated(cpu_data[, c("Product_Collection", "Processor_Number")]), ]
View(duplicated_instances)
legacy_pentium_instances <- cpu_data[cpu_data$Product_Collection == "Legacy Intel® Pentium® Processor", ]
View(legacy_pentium_instances)
duplicated_legacy_pentium_instances  <- legacy_pentium_instances [duplicated(cpu_data[, c("Product_Collection", "Processor_Number")]), ]
View(duplicated_legacy_pentium_instances)
grouped_legacy_pentium_instances <- legacy_pentium_instances %>%
group_by(Product_Collection, Processor_Number) %>%
filter(duplicated(Processor_Number)) %>%
ungroup()
View(grouped_legacy_pentium_instances)
> grouped_instances <- cpu_data %>%
grouped_instances <- cpu_data %>%
+     group_by(Product_Collection, Processor_Number) %>%
+     filter(duplicated(Processor_Number)) %>%
+     ungroup()
grouped_legacy_pentium_instances <- legacy_pentium_instances %>%
+     group_by(Product_Collection, Processor_Number) %>%
+     filter(duplicated(Processor_Number)) %>%
+     ungroup()
grouped_instances <- cpu_data %>%
+     group_by("Product_Collection", "Processor_Number") %>%
+     filter(duplicated("Processor_Number")) %>%
+     ungroup()
grouped_instances <- cpu_data %>%
+     group_by(Product_Collection, Processor_Number) %>%
+     filter(duplicated(Processor_Number)) %>%
+     ungroup()
grouped_duplicates <- legacy_pentium_instances %>%
group_by(Product_Collection, Processor_Number) %>%
filter(duplicated(Processor_Number)) %>%
ungroup()
grouped_duplicates <- cpu_data %>%
group_by(Product_Collection, Processor_Number) %>%
filter(duplicated(Processor_Number)) %>%
ungroup()
View(duplicated_instances)
difference <- nrow(cpu_data) - nrow(unique(cpu_data[, c("Product_Collection", "Vertical_Segment", "Processor_Number")]))
difference
difference <- nrow(cpu_data) - nrow(unique(cpu_data[, c("Product_Collection", "Vertical_Segment", "Processor_Number", "Launch_Date")]))
difference
price_available = sum(!is.na(cpu_data$Recommended_Customer_Price))
price_available
cpu_data$Recommended_Customer_Price
price_available = sum(cpu_data$Recommended_Customer_Price !== "N/A")
price_available = sum(cpu_data$Recommended_Customer_Price != "N/A")
price_available
price_available_cpu_data <- cpu_data$Recommended_Customer_Price != "N/A"
price_available_cpu_data <- cpu_data[Recommended_Customer_Price != "N/A"]
filtered_cpu_data <- cpu_data[complete.cases(cpu_data$Recommended_Customer_Price), ]
price_available_cpu_data <-cpu_data[cpu_data$Recommended_Customer_Price != "N/A", ]
View(price_available_cpu_data)
price_available_cpu_data$Conflict_Free
price_available_cpu_data[price_available_cpu_data$Conflict_Free != "", ]
sum(price_available_cpu_data[price_available_cpu_data$Conflict_Free != "", ])
count(price_available_cpu_data[price_available_cpu_data$Conflict_Free != "", ])
count(price_available_cpu_data[price_available_cpu_data$Lithography != "", ])
filtered_price_available_cpu_data <- price_available_cpu_data %>%
filter_all(any_vars(. != ""))
View(filtered_cpu_data)
View(filtered_price_available_cpu_data)
filtered_price_available_cpu_data <- price_available_cpu_data[any_vars(. != "")]
filtered_cpu_data <- cpu_data %>%
filter_all(all_vars(!is.na(.) & . != ""))
View(filtered_cpu_data)
filtered_cpu_data <- cpu_data %>%
filter_all(all_vars(!= ""))
filtered_cpu_data <- cpu_data %>%
filter_all(all_vars(!= ""))
filtered_cpu_data <- cpu_data %>%
filter_all(all_vars(.!= ""))
filtered_price_available_cpu_data <- price_available_cpu_data[rowSums(price_available_cpu_data == "") == 0]
filtered_price_available_cpu_data  <- price_available_cpu_data[apply(price_available_cpu_data, 1, function(row) !any(row == "")), ]
View(filtered_price_available_cpu_data)
View(filtered_price_available_cpu_data)
View(filtered_cpu_data)
View(price_available_cpu_data)
price_available_cpu_data_properties <-price_available_cpu_data["Recommended_Customer_Price"]
View(price_available_cpu_data_properties)
View(filtered_cpu_data)
View(grouped_duplicates)
View(collection)
rm(result_list)
rm(i3_4th)
# Inspect the CPU data
kable(head(cpu_data), format = "html") %>%
kable_styling()
cpu_columns <- colnames(cpu_data)
cpu_columns
price_available_cpu_data <-cpu_data[cpu_data$Recommended_Customer_Price != "N/A", ]
price_available_cpu_data_properties <-price_available_cpu_data["Recommended_Customer_Price", "Processor_Number", "nb_of_Cores"]
price_available_cpu_data_properties <- price_available_cpu_data[, c("Recommended_Customer_Price", "Processor_Number", "nb_of_Cores")]
price_available_cpu_data_chosen_columns <- price_available_cpu_data[, c("Recommended_Customer_Price", "Processor_Number", "nb_of_Cores")]
filtered_price_available_cpu_data_chosen_columns <- price_available_cpu_data_chosen_columns[apply(price_available_cpu_data_chosen_columns), ]
filtered_price_available_cpu_data_chosen_columns  <- price_available_cpu_data_chosen_columns[apply(price_available_cpu_data_chosen_columns, 1, function(row) !any(row == "")), ]
View(filtered_price_available_cpu_data_chosen_columns)
colnames(cpu_data)
price_available_cpu_data <-cpu_data[cpu_data$Recommended_Customer_Price != "N/A", ]
price_available_cpu_data_chosen_columns <- price_available_cpu_data[, c("Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency")]
filtered_price_available_cpu_data_chosen_columns  <- price_available_cpu_data_chosen_columns[apply(price_available_cpu_data_chosen_columns, 1, function(row) !any(row == "")), ]
price_available_cpu_data <-cpu_data[cpu_data$Recommended_Customer_Price != "N/A", ]
price_available_cpu_data_chosen_columns <- price_available_cpu_data[, c("Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Bus_Speed")]
filtered_price_available_cpu_data_chosen_columns  <- price_available_cpu_data_chosen_columns[apply(price_available_cpu_data_chosen_columns, 1, function(row) !any(row == "")), ]
View(filtered_price_available_cpu_data_chosen_columns)
View(filtered_price_available_cpu_data_chosen_columns)
price_available_cpu_data <-
cpu_data[cpu_data$Recommended_Customer_Price != "N/A"
&& !is.na(cpu_data$Recommended_Customer_Price)]
price_available_cpu_data <-
cpu_data[cpu_data$Recommended_Customer_Price != "N/A"
& !is.na(cpu_data$Recommended_Customer_Price), ]
price_available_cpu_data_chosen_columns <- price_available_cpu_data[, c("Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Bus_Speed")]
filtered_price_available_cpu_data_chosen_columns  <- price_available_cpu_data_chosen_columns[apply(price_available_cpu_data_chosen_columns, 1, function(row) !any(row == "")), ]
View(filtered_price_available_cpu_data_chosen_columns)
price_available_cpu_data <-
cpu_data[grepl("^\\$", cpu_data$Recommended_Customer_Price), ]
price_available_cpu_data_chosen_columns <- price_available_cpu_data[, c("Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Bus_Speed")]
filtered_price_available_cpu_data_chosen_columns  <- price_available_cpu_data_chosen_columns[apply(price_available_cpu_data_chosen_columns, 1, function(row) !any(row == "")), ]
View(price_available_cpu_data)
price_available_cpu_data <-
cpu_data[grepl("^\\$", cpu_data$Recommended_Customer_Price), ]
price_available_cpu_data_chosen_columns <- price_available_cpu_data[, c("Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Bus_Speed")]
View(price_available_cpu_data_chosen_columns)
price_available_cpu_data <-
cpu_data[grepl("^\\$", cpu_data$Recommended_Customer_Price), ]
price_available_cpu_data_chosen_columns <- price_available_cpu_data[, c("Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Bus_Speed")]
filtered_price_available_cpu_data_chosen_columns <-
price_available_cpu_data_chosen_columns[
apply(price_available_cpu_data_chosen_columns, 1, function(row) !any(row == "" & is.na(row))), ]
View(filtered_price_available_cpu_data_chosen_columns)
# Libraries and options
library(dplyr)
library(here)
library(knitr)
library(kableExtra)
# Self-defined functions
source("utils.R")
# Working directory
setwd(here())
filtered_price_available_cpu_data_chosen_columns <- price_available_cpu_data_chosen_columns[sapply(row, is_valid)]
filtered_price_available_cpu_data_chosen_columns <- price_available_cpu_data_chosen_columns[apply(price_available_cpu_data_chosen_columns, 1, function(row) all(sapply(row, is_valid))), ]
View(filtered_price_available_cpu_data_chosen_columns)
selected_cpu_data <- cpu_data[, c("Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Bus_Speed")]
processed_cpu_data <-
selected_cpu_data[
apply(selected_cpu_data, 1, function(row) all(sapply(row, is_valid))), ]
View(processed_cpu_data)
# Libraries and options
library(dplyr)
library(here)
library(knitr)
library(kableExtra)
# Self-defined functions
source("utils.R")
# Working directory
setwd(here())
# Read the CSV file into a data frame
cpu_data <- read.csv("dataset/Intel_CPUs.csv")
gpu_data <- read.csv("dataset/All_GPUs.csv")
# Inspect the CPU data
kable(head(cpu_data), format = "html") %>%
kable_styling()
rm(list = ls())
# Libraries and options
library(dplyr)
library(here)
library(knitr)
library(kableExtra)
# Self-defined functions
source("utils.R")
# Working directory
setwd(here())
# Read the CSV file into a data frame
cpu_data <- read.csv("dataset/Intel_CPUs.csv")
gpu_data <- read.csv("dataset/All_GPUs.csv")
Intel_clean = cpu_data[,c("Product_Collection","Vertical_Segment","Processor_Number","Status","Launch_Date",
"Lithography","Recommended_Customer_Price","nb_of_Cores","nb_of_Threads",
"Processor_Base_Frequency","Cache","Instruction_Set","TDP","Max_Memory_Size",
"Memory_Types","Max_nb_of_Memory_Channels","Max_Memory_Bandwidth")]
print(apply(is.na(Intel_clean),2,sum) )
empty <- apply(is.na(Intel_clean),2,sum)
kable(head(cpu_data), format = "html") %>%
kable_styling()
na_counts <- colSums(is.na(cpu_data))
kable(head(na_counts), format = "html") %>%
kable_styling()
View(cpu_data)
View(cpu_data)
# Assuming 'cpu_data' is your dataframe
na_counts <- colSums(is.na(cpu_data))
# Create dataframe with Property and NA_Count columns
na_counts_df <- data.frame(Property = names(na_counts), NA_Count = na_counts)
# Print the dataframe
print(na_counts_df)
na_counts <- colSums(is.na(cpu_data))
na_counts_df <-
data.frame(Property = names(na_counts), NA_Count = na_counts)[na_counts_df$NA_Count > 0, ]
print(na_counts_df)
na_counts <- colSums(!is_valid(cpu_data))
invalid_counts <- colSums(!sapply(cpu_data, is_valid))
# Create dataframe with Property and Invalid_Count columns
invalid_counts_df <- data.frame(Property = names(invalid_counts), Invalid_Count = invalid_counts)
# Print the dataframe
print(invalid_counts_df)
is_valid <- function(value) {
value <- tolower(value)
invalid_types <- c("NA", "NULL", "", "n/a", "-", "missing", "unknown")
invalid_reason <- NULL
if (is.na(value)) {
invalid_reason <- "NA"
} else if (is.null(value)) {
invalid_reason <- "NULL"
} else if (value == "") {
invalid_reason <- "Empty string"
} else if (value == "n/a") {
invalid_reason <- "N/A"
} else if (trimws(value) == "-") {
invalid_reason <- "Hyphen"
} else if (grepl("missing", value)) {
invalid_reason <- "Contains 'missing'"
} else if (grepl("unknown", value)) {
invalid_reason <- "Contains 'unknown'"
}
return(invalid_reason)
}
# Applying the is_valid function to each element of cpu_data
invalid_reasons <- lapply(cpu_data, is_valid)
is_valid <- function(value) {
value <- tolower(value)
invalid_types <- c("NA", "NULL", "", "n/a", "-", "missing", "unknown")
invalid_reason <- NULL
if (is.na(value)) {
invalid_reason <- "NA"
} else if (is.null(value)) {
invalid_reason <- "NULL"
} else if (value == "") {
invalid_reason <- "Empty string"
} else if (value == "n/a") {
invalid_reason <- "N/A"
} else if (trimws(value) == "-") {
invalid_reason <- "Hyphen"
} else if (grepl("missing", value)) {
invalid_reason <- "Contains 'missing'"
} else if (grepl("unknown", value)) {
invalid_reason <- "Contains 'unknown'"
}
return(invalid_reason)
}
# Applying the is_valid function to each element of cpu_data
invalid_reasons <- lapply(cpu_data, is_valid)
is_valid <- function(value) {
value <- tolower(value)
invalid_types <- c("NA", "NULL", "", "n/a", "-", "missing", "unknown")
invalid_reason <- character(length(value))  # Initialize the vector to store reasons
for (i in seq_along(value)) {
if (is.na(value[i])) {
invalid_reason[i] <- "NA"
} else if (is.null(value[i])) {
invalid_reason[i] <- "NULL"
} else if (value[i] == "") {
invalid_reason[i] <- "Empty string"
} else if (value[i] == "n/a") {
invalid_reason[i] <- "N/A"
} else if (trimws(value[i]) == "-") {
invalid_reason[i] <- "Hyphen"
} else if (grepl("missing", value[i])) {
invalid_reason[i] <- "Contains 'missing'"
} else if (grepl("unknown", value[i])) {
invalid_reason[i] <- "Contains 'unknown'"
} else {
invalid_reason[i] <- "Valid"
}
}
return(invalid_reason)
}
# Applying the is_valid function to each element of cpu_data
invalid_reasons <- lapply(cpu_data, is_valid)
# Converting the list to a dataframe
invalid_reasons_df <- data.frame(Property = names(invalid_reasons), Invalid_Reason = unlist(invalid_reasons))
# Counting the occurrences of each invalid reason
invalid_counts <- table(invalid_reasons_df$Invalid_Reason)
# Create dataframe with Invalid_Reason and Invalid_Count columns
invalid_counts_df <- data.frame(Invalid_Reason = names(invalid_counts), Invalid_Count = as.vector(invalid_counts))
# Print the dataframe
print(invalid_counts_df)
na_counts <- colSums(is.na(cpu_data))
na_counts_df <-
data.frame(Property = names(na_counts), NA_Count = na_counts)[na_counts_df$NA_Count > 0, ]
print(na_counts_df)
na_counts <- colSums(is.na(cpu_data))
na_counts_df <-
data.frame(Property = names(na_counts), NA_Count = na_counts)[na_counts_df$NA_Count > 0, ]
print(na_counts_df)
# Count of NA values
na_counts <- colSums(is.na(cpu_data))
# Count of empty strings
empty_counts <- colSums(cpu_data == "")
# Create a data frame for properties with NA values
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = na_counts,
Empty_Count = empty_counts)[na_counts > 0 || empty_counts>0]
# Count of NA values
na_counts <- colSums(is.na(cpu_data))
# Count of empty strings
empty_counts <- colSums(cpu_data == "")
# Create a data frame for properties with NA values
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = na_counts,
Empty_Count = empty_counts)[na_counts > 0 | empty_counts>0]
# Count of NA values
na_counts <- colSums(is.na(cpu_data))
# Count of empty strings
empty_counts <- colSums(cpu_data == "")
# Create a data frame for properties with NA values
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = na_counts,
Empty_Count = empty_counts)[NA_Count > 0 | Empty_Count>0]
# Count of NA values
na_counts <- colSums(is.na(cpu_data))
# Count of empty strings
empty_counts <- colSums(cpu_data == "")
# Create a data frame for properties with NA values
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = na_counts,
Empty_Count = empty_counts)[na_counts > 0]
# Count of NA values
na_counts <- colSums(is.na(cpu_data))
# Count of empty strings
empty_counts <- colSums(cpu_data == "")
# Create a data frame for properties with NA values
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = na_counts,
Empty_Count = empty_counts)[NA_Count > 0]
# Count of NA values
na_counts <- colSums(is.na(cpu_data))
# Count of empty strings
empty_counts <- colSums(cpu_data == "")
# Create a data frame for properties with NA values
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = na_counts,
Empty_Count = empty_counts)
# Print properties with NA values
print(invalid_df[invalid_df$NA_Count > 0, ])
View(cpu_data)
View(cpu_data)
print(cpu_data[invalid_df$Lauch_Date == ""])
print(cpu_data[invalid_df$nb_of_Threads                              == ""])
print(cpu_data[cpu_data$nb_of_Threads== ""])
print(cpu_data[cpu_data$nb_of_Threads == ""])
print(invalid_df[invalid_df$NA_Count > 0, ])
cpu_data$nb_of_Threads
print(cpu_data[cpu_data$nb_of_Threads == ""])
print(cpu_data[cpu_data$nb_of_Threads])
filtered_data <- cpu_data[cpu_data$nb_of_Threads == "", ]
filtered_data
# Count of NA values
na_counts <- colSums(is.na(cpu_data))
kable(head(filtered_data), format = "html") %>%
kable_styling()
kable(head(invalid_df), format = "html") %>%
kable_styling()
kable(invalid_df, format = "html") %>%
kable_styling()
# Count of NA values
na_counts <- colSums(is.na(cpu_data))
# Count of empty strings
empty_counts <- colSums(cpu_data == "")
# Create a data frame for properties with NA values
invalid_df <-
data.frame(NA_Count = na_counts,
Empty_Count = empty_counts)
kable(invalid_df, format = "html") %>%
kable_styling()
kable(empty_counts, format = "html") %>%
kable_styling()
# Count of NA values
na_counts <- colSums(is.na(cpu_data))
# Count of empty strings
empty_counts <- colSums(cpu_data == "")
# Create a data frame for properties with NA values
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = na_counts,
Empty_Count = empty_counts)
kable(invalid_df, format = "html") %>%
kable_styling()
# Count of NA values
na_counts <- colSums(is.na(cpu_data))[]
# Count of empty strings
empty_counts <- colSums(cpu_data == "")[]
# Create a data frame for properties with NA values
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = na_counts,
Empty_Count = empty_counts)
kable(invalid_df, format = "html") %>%
kable_styling()
# Count of NA values
na_counts <- colSums(is.na(cpu_data))
# Count of empty strings
empty_counts <- colSums(cpu_data == "")
# Create a data frame for properties with NA values
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = na_counts[],
Empty_Count = empty_counts[])
kable(invalid_df, format = "html") %>%
kable_styling()
kable(na_counts, format = "html") %>%
kable_styling()
na_counts
na_counts_values <- na_counts[]
na_counts_values
# Extracting only the count values without column names
na_counts_values <- unname(na_counts)
na_counts_values
# Count of NA values
na_counts <- unname(colSums(is.na(cpu_data)))
# Count of empty strings
empty_counts <- unname(colSums(cpu_data == ""))
# Create a data frame for properties with NA values
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = na_counts[],
Empty_Count = empty_counts[])
# Count of NA values
na_counts <- colSums(is.na(cpu_data))
# Count of empty strings
empty_counts <- colSums(cpu_data == "")
# Create a data frame for properties with NA values
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = unname(na_counts),
Empty_Count = unname(empty_counts[]))
kable(na_counts, format = "html") %>%
kable_styling()
kable(invalid_df, format = "html") %>%
kable_styling()
# Count of NA values
na_counts <- colSums(is.na(cpu_data))
# Count of empty strings
empty_counts <- colSums(is.character(cpu_data) & cpu_data == "")
# Create a data frame for properties with NA values
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = unname(na_counts),
Empty_Count = unname(empty_counts[]))
kable(invalid_df, format = "html") %>%
kable_styling()
# Count of NA values
na_counts <- colSums(is.na(cpu_data))
# Count of empty strings
empty_counts <- colSums(cpu_data == "")
# Create a data frame for properties with NA values
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = unname(na_counts),
Empty_Count = unname(empty_counts[]))
kable(invalid_df, format = "html") %>%
kable_styling()
# Count of NA values
na_counts <- colSums(is.na(cpu_data))
# Count of empty strings
empty_counts <- colSums(cpu_data == "")
# Create a data frame for properties with NA values
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = unname(na_counts),
Empty_Count = unname(empty_counts[]))
kable(invalid_df, format = "html") %>%
kable_styling()
