filtered_cpu_data <- filtered_data(cpu_data, valid_percentage=0.8)
processed_cpu_data <-
filtered_cpu_data[
apply(filtered_cpu_data, 1, function(row) all(sapply(row, is_valid))), ]
selected_cpu_data <- processed_cpu_data[] # Adjust selected columns for your later needs
selected_cpu_data <- unique(selected_cpu_data)
kable(head(selected_cpu_data), format = "html") %>%
kable_styling()
View(selected_cpu_data)
View(selected_cpu_data)
na_selected_counts <- colSums(sapply(selected_cpu_data,
function(x)
x == "N/A"))
kable(head(na_selected_counts ), format = "html") %>%
kable_styling()
kable(na_selected_counts, format = "html") %>%
+     kable_styling()
kable(na_selected_counts, format = "html") %>%
+     kable_styling()
kable(selected_cpu_data, format = "html") %>%
kable_styling()
na_selected_counts <- colSums(sapply(selected_cpu_data,
function(x)
is.na(x) | x == "N/A"))
filtered_rows <- apply(filtered_cpu_data, 1, function(row) {
all(sapply(row, is_valid))
})
filtered_cpu_data_valid <- filtered_cpu_data[filtered_rows, ]
View(filtered_cpu_data_valid)
View(filtered_cpu_data_valid)
colSums(sapply(filtered_cpu_data_valid,
function(x)
is.na(x) | x == "N/A"))
colSums(sapply(filtered_cpu_data_valid,
+                function(x)
+                     x == "N/A"))
colSums(sapply(filtered_cpu_data_valid,
function(x)                      x == "N/A"))
processed_cpu_data <-
filtered_cpu_data[
apply(filtered_cpu_data, 1,
function(row)
row != "N/A", )]
is_valid <- function(value) {
value <- tolower(trimws(value))  # Trim leading and trailing whitespaces and convert to lowercase
return(!is.na(value)
& !is.null(value)
& !value == ""
& !value == "n/a"  # Adjusted to lowercase
& !value == "-"
& !grepl("missing", value)
& !grepl("unknown", value))
# Add your criteria
}
processed_cpu_data <-
filtered_cpu_data[
apply(filtered_cpu_data, 1,
function(row)
all(sapply(row, is_valid))), ]
View(processed_cpu_data)
View(processed_cpu_data)
selected_cpu_data <- processed_cpu_data[] # Adjust selected columns for your later needs
selected_cpu_data <- unique(selected_cpu_data)
kable(head(selected_cpu_data), format = "html") %>%
kable_styling()
View(filtered_cpu_data_valid)
View(filtered_cpu_data_valid)
View(selected_cpu_data)
View(selected_cpu_data)
extracted_selected_cpu_data$Recommended_Customer_Price <-
gsub("\\$", "", Intel_clean$Recommended_Customer_Price) %>%
gsub(",", "", Intel_clean$Recommended_Customer_Price) %>%
sapply(Intel_clean$Recommended_Customer_Price, range_average) %>%
as.double(Intel_clean$Recommended_Customer_Price)
extracted_selected_cpu_data$Recommended_Customer_Price <-
gsub("\\$", "", extracted_selected_cpu_data$Recommended_Customer_Price) %>%
gsub(",", "", extracted_selected_cpu_data$Recommended_Customer_Price) %>%
sapply(extracted_selected_cpu_data$Recommended_Customer_Price, range_average) %>%
as.double(extracted_selected_cpu_data$Recommended_Customer_Price)
range_average <- function(price_range) {
if(grepl('-', price_range)) {
range <- strsplit(price_range, "-")[[1]]
return((as.double(range[1]) + as.double(range[2])) / 2)
}
return (price_range)
}
extracted_selected_cpu_data$Recommended_Customer_Price <- gsub("\\$", "", extracted_selected_cpu_data$Recommended_Customer_Price)
extracted_selected_cpu_data$Recommended_Customer_Price <- gsub(",", "", extracted_selected_cpu_data$Recommended_Customer_Price)
extracted_selected_cpu_data$Recommended_Customer_Price <- sapply(extracted_selected_cpu_data$Recommended_Customer_Price, recommend_price)
recommended_price <- function(price_range) {
if(grepl('-', price_range)) {
range <- strsplit(price_range, "-")[[1]]
return((as.double(range[1]) + as.double(range[2])) / 2)
}
return (price_range)
}
extracted_selected_cpu_data$Recommended_Customer_Price <- gsub("\\$", "", extracted_selected_cpu_data$Recommended_Customer_Price)
extracted_selected_cpu_data$Recommended_Customer_Price <- gsub(",", "", extracted_selected_cpu_data$Recommended_Customer_Price)
extracted_selected_cpu_data$Recommended_Customer_Price <- sapply(extracted_selected_cpu_data$Recommended_Customer_Price, recommended_price)
extracted_selected_cpu_data$Recommended_Customer_Price <- as.double(extracted_selected_cpu_data$Recommended_Customer_Price)
extracted_selected_cpu_data$Recommended_Customer_Price <- log(extracted_selected_cpu_data$Recommended_Customer_Price)
extracted_selected_cpu_data <- extracted_selected_cpu_data %>%
group_by(Product_Collection) %>%
fill(Recommended_Customer_Price, .direction = "updown")
View(extracted_selected_cpu_data)
View(extracted_selected_cpu_data)
extracted_selected_cpu_data <- selected_cpu_data
extracted_selected_cpu_data$Release_Year <-
as.integer(sub("Q[1-4]'(\\d+)", "\\1",
gsub("\\s+", "", selected_cpu_data$Release_Date))) + 2000
names(selected_cpu_data)[names(selected_cpu_data) == "Launch_Date"] <- "Release_Date"
extracted_selected_cpu_data <- selected_cpu_data
extracted_selected_cpu_data$Release_Year <-
as.integer(sub("Q[1-4]'(\\d+)", "\\1",
gsub("\\s+", "", selected_cpu_data$Release_Date))) + 2000
extracted_selected_cpu_data$Release_Quarter <-
as.integer(sub("Q([1-4])'.*", "\\1",
gsub("\\s+", "", selected_cpu_data$Release_Date)))
extracted_selected_cpu_data$Recommended_Customer_Price <-
gsub("\\$", "", extracted_selected_cpu_data$Recommended_Customer_Price)
extracted_selected_cpu_data$Recommended_Customer_Price <- gsub(",", "", extracted_selected_cpu_data$Recommended_Customer_Price)
recommended_price <- function(price_range) {
if(grepl('-', price_range)) {
range <- strsplit(price_range, " - ")[[1]]
return((as.double(range[1]) + as.double(range[2])) / 2)
}
return (price_range)
}
extracted_selected_cpu_data$Recommended_Customer_Price <- sapply(extracted_selected_cpu_data$Recommended_Customer_Price, recommended_price)
extracted_selected_cpu_data$Recommended_Customer_Price <- as.double(extracted_selected_cpu_data$Recommended_Customer_Price)
View(extracted_selected_cpu_data)
View(extracted_selected_cpu_data)
litho_year <- extracted_selected_cpu_data %>%
group_by(Release_Year) %>%
summarize(mean_litho = mean(Lithography),
median_litho = median(Lithography),
.groups = "drop"
)
extracted_selected_cpu_data$Lithography <-
as.integer(gsub("nm", "",
extracted_selected_cpu_data$Lithography))
View(extracted_selected_cpu_data)
View(extracted_selected_cpu_data)
litho_year <- extracted_selected_cpu_data %>%
group_by(Release_Year) %>%
summarize(mean_litho = mean(Lithography),
median_litho = median(Lithography),
.groups = "drop"
)
options(repr.plot.width = 15, repr.plot.height =8)
ggplot(Litho_year, aes(x = Launch_Year)) +
geom_line(aes(y = mean_litho, color = "Mean")) +
geom_line(aes(y = median_litho, color = "Median")) +
scale_color_manual(values = c("Mean" = "blue", "Median" = "red")) +
labs(x = "Year", y = "Lithography", title = "Mean and Median Lithography by Year") +
scale_x_continuous(breaks = seq(min(Litho_year$Launch_Year), max(Litho_year$Launch_Year),
by = 1)) +
theme_minimal()
# Libraries and options
library(dplyr)
library(here)
library(knitr)
library(kableExtra)
library(ggplot2)
# Self-defined functions
source("utils.R")
# Working directory
setwd(here())
litho_year <- extracted_selected_cpu_data %>%
group_by(Release_Year) %>%
summarize(mean_litho = mean(Lithography),
median_litho = median(Lithography),
.groups = "drop"
)
options(repr.plot.width = 15, repr.plot.height =8)
ggplot(Litho_year, aes(x = Launch_Year)) +
geom_line(aes(y = mean_litho, color = "Mean")) +
geom_line(aes(y = median_litho, color = "Median")) +
scale_color_manual(values = c("Mean" = "blue", "Median" = "red")) +
labs(x = "Year", y = "Lithography", title = "Mean and Median Lithography by Year") +
scale_x_continuous(breaks = seq(min(Litho_year$Launch_Year), max(Litho_year$Launch_Year),
by = 1)) +
theme_minimal()
litho_year <- extracted_selected_cpu_data %>%
group_by(Release_Year) %>%
summarize(mean_litho = mean(Lithography),
median_litho = median(Lithography),
.groups = "drop"
)
options(repr.plot.width = 15, repr.plot.height =8)
ggplot(Litho_year, aes(x = Release_Year)) +
geom_line(aes(y = mean_litho, color = "Mean")) +
geom_line(aes(y = median_litho, color = "Median")) +
scale_color_manual(values = c("Mean" = "blue", "Median" = "red")) +
labs(x = "Year", y = "Lithography", title = "Mean and Median Lithography by Year") +
scale_x_continuous(breaks = seq(min(litho_year$Release_Year), max(litho_year$Release_Year),
by = 1)) +
theme_minimal()
litho_year <- extracted_selected_cpu_data %>%
group_by(Release_Year) %>%
summarize(mean_litho = mean(Lithography),
median_litho = median(Lithography),
.groups = "drop"
)
options(repr.plot.width = 15, repr.plot.height =8)
ggplot(litho_year, aes(x = Release_Year)) +
geom_line(aes(y = mean_litho, color = "Mean")) +
geom_line(aes(y = median_litho, color = "Median")) +
scale_color_manual(values = c("Mean" = "blue", "Median" = "red")) +
labs(x = "Year", y = "Lithography", title = "Mean and Median Lithography by Year") +
scale_x_continuous(breaks = seq(min(litho_year$Release_Year), max(litho_year$Release_Year),
by = 1)) +
theme_minimal()
ggplot(litho_year, aes(x = Release_Year)) +
geom_line(aes(y = mean_litho, color = "Mean")) +
geom_line(aes(y = median_litho, color = "Median")) +
scale_color_manual(values = c("Mean" = "blue", "Median" = "red")) +
labs(x = "Year", y = "Lithography", title = "Mean and Median Lithography by Year") +
scale_x_continuous(breaks = seq(min(litho_year$Release_Year), max(litho_year$Release_Year),
by = 1)) +
theme_minimal()
shapiro.test(extracted_selected_cpu_data$nb_of_Cores)
ggqqplot(extracted_selected_cpu_data$nb_of_Cores)
# Libraries and options
library(dplyr)
library(here)
library(knitr)
library(kableExtra)
library(ggplot2)
library(ggpubr)
install.packages("ggpubr")
# Libraries and options
library(dplyr)
library(here)
library(knitr)
library(kableExtra)
library(ggplot2)
library(ggpubr)
options(repr.plot.width = 15, repr.plot.height =8)
# Self-defined functions
source("utils.R")
# Working directory
setwd(here())
shapiro.test(extracted_selected_cpu_data$nb_of_Cores)
ggqqplot(extracted_selected_cpu_data$nb_of_Cores)
bartlett.test(Intel_clean$nb_of_Cores ~ Intel_clean$Product_Collection, data = Intel_clean)
ggqqplot(extracted_selected_cpu_data$nb_of_Cores)
bartlett.test(extracted_selected_cpu_data$nb_of_Cores ~ extracted_selected_cpu_data$Product_Collection, data = extracted_selected_cpu_data)
# Libraries and options
library(dplyr)
library(here)
library(knitr)
library(kableExtra)
library(ggplot2)
library(ggpubr)
library(car)
options(repr.plot.width = 15, repr.plot.height =8)
# Self-defined functions
source("utils.R")
# Working directory
setwd(here())
shapiro.test(extracted_selected_cpu_data$nb_of_Cores)
ggqqplot(extracted_selected_cpu_data$nb_of_Cores)
leveneTest(nb_of_Cores~Product_Collection*Vertical_Segment, data = extracted_selected_cpu_data)
bartlett.test(extracted_selected_cpu_data$nb_of_Cores ~ extracted_selected_cpu_data$Product_Collection, data = extracted_selected_cpu_data)
leveneTest(nb_of_Cores~Product_Collection*Vertical_Segment, data = extracted_selected_cpu_data)
shapiro.test(extracted_selected_cpu_data$nb_of_Cores)
ggqqplot(extracted_selected_cpu_data$nb_of_Cores)
leveneTest(nb_of_Cores~Product_Collection*Vertical_Segment, data = extracted_selected_cpu_data)
bartlett.test(extracted_selected_cpu_data$nb_of_Cores ~ extracted_selected_cpu_data$Product_Collection, data = extracted_selected_cpu_data)
shapiro.test(extracted_selected_cpu_data$nb_of_Cores)
ggqqplot(extracted_selected_cpu_data$nb_of_Cores)
leveneTest(nb_of_Cores~Product_Collection*Vertical_Segment, data = extracted_selected_cpu_data)
#bartlett.test(extracted_selected_cpu_data$nb_of_Cores ~ #extracted_selected_cpu_data$Product_Collection, data = extracted_selected_cpu_data)
new_data <- extracted_selected_cpu_data[extracted_selected_cpu_data$Product_Collection %in% c("Core", "Legacy") & extracted_selected_cpu_data$Vertical_Segment %in% c("Desktop", "Embedded", "Mobile"),]
Product_Collection <- as.factor(new_data$Product_Collection)
Vertical_Segment <- as.factor(new_data$Vertical_Segment)
nb_of_Cores <- new_data$nb_of_Cores
av <- aov(nb_of_Cores ~ Product_Collection*Vertical_Segment, data = new_data)
View(new_data)
View(new_data)
View(extracted_selected_cpu_data)
View(extracted_selected_cpu_data)
rm()
rm(list = ls())
# Libraries and options
library(dplyr)
library(here)
library(knitr)
library(kableExtra)
library(ggplot2)
library(ggpubr)
library(car)
options(repr.plot.width = 15, repr.plot.height =8)
# Self-defined functions
source("utils.R")
# Working directory
setwd(here())
raw_cpu_data <- read.csv("dataset/Intel_CPUs.csv")
kable(head(raw_cpu_data), format = "html") %>%
kable_styling()
raw_gpu_data <- read.csv("dataset/All_GPUs.csv")
kable(head(raw_gpu_data), format = "html") %>%
kable_styling()
# Count NA and empty strings
na_counts <- colSums(sapply(raw_cpu_data,
function(x)
is.na(x) | x == "N/A"))
empty_counts <- colSums(sapply(raw_cpu_data,
function(x)
is.character(x) &
(x == "" | x == "-")))
# Get percentage of invalid values
invalid_percentage <- (na_counts+empty_counts)/nrow(raw_cpu_data)*100
# Display
invalid_df <-
data.frame(Property = names(na_counts),
NA_Count = unname(na_counts),
Empty_Count = unname(empty_counts),
Invalid_Percentage = unname(invalid_percentage)) %>%
arrange(desc(Invalid_Percentage))
kable(invalid_df, format = "html") %>%
kable_styling()
filtered_cpu_data <- filtered_data(raw_cpu_data, valid_percentage=0.8)
is_valid <- function(value) {
value <- tolower(trimws(value))
return(!is.na(value)
& !is.null(value)
& !value == ""
& !value == "n/a"
& !value == "-"
& !grepl("missing", value)
& !grepl("unknown", value))
}
filtered_cpu_data <-
filtered_cpu_data[
apply(filtered_cpu_data, 1,
function(row)
all(sapply(row, is_valid))), ]
selected_cpu_data <- processed_cpu_data[]
month_to_quarter <- function(month) {
quarter <- switch(month,
"Jan" = "1",
"Feb" = "1",
"Mar" = "1",
"Apr" = "2",
"May" = "2",
"Jun" = "2",
"Jul" = "3",
"Aug" = "3",
"Sep" = "3",
"Oct" = "4",
"Nov" = "4",
"Dec" = "4",
"Unknown")
return(quarter)
}
recommended_price <- function(price_range) {
if(grepl('-', price_range)) {
range <- strsplit(price_range, " - ")[[1]]
return((as.double(range[1]) + as.double(range[2])) / 2)
}
return (price_range)
}
names(selected_cpu_data)[names(selected_cpu_data) == "Launch_Date"] <- "Release_Date"
selected_cpu_data <- filtered_cpu_data[]
selected_cpu_data <- unique(selected_cpu_data)
month_to_quarter <- function(month) {
quarter <- switch(month,
"Jan" = "1",
"Feb" = "1",
"Mar" = "1",
"Apr" = "2",
"May" = "2",
"Jun" = "2",
"Jul" = "3",
"Aug" = "3",
"Sep" = "3",
"Oct" = "4",
"Nov" = "4",
"Dec" = "4",
"Unknown")
return(quarter)
}
recommended_price <- function(price_range) {
if(grepl('-', price_range)) {
range <- strsplit(price_range, " - ")[[1]]
return((as.double(range[1]) + as.double(range[2])) / 2)
}
return (price_range)
}
names(selected_cpu_data)[names(selected_cpu_data) == "Launch_Date"] <- "Release_Date"
processed_cpu_data <- selected_cpu_data
processed_cpu_data$Release_Year <-
as.integer(sub("Q[1-4]'(\\d+)", "\\1",
gsub("\\s+", "", selected_cpu_data$Release_Date))) + 2000
processed_cpu_data$Release_Quarter <-
as.integer(sub("Q([1-4])'.*", "\\1",
gsub("\\s+", "", selected_cpu_data$Release_Date)))
processed_cpu_data$Recommended_Customer_Price <-
as.double(gsub("[\\$,]", "",
processed_cpu_data$Recommended_Customer_Price))
processed_cpu_data$Lithography <-
as.integer(gsub("nm", "",
processed_cpu_data$Lithography))
processed_cpu_data$Recommended_Customer_Price <- log(processed_cpu_data$Recommended_Customer_Price)
processed_cpu_data <- processed_cpu_data %>%
group_by(Product_Collection) %>%
fill(Recommended_Customer_Price, .direction = "updown")
month_to_quarter <- function(month) {
quarter <- switch(month,
"Jan" = "1",
"Feb" = "1",
"Mar" = "1",
"Apr" = "2",
"May" = "2",
"Jun" = "2",
"Jul" = "3",
"Aug" = "3",
"Sep" = "3",
"Oct" = "4",
"Nov" = "4",
"Dec" = "4",
"Unknown")
return(quarter)
}
recommended_price <- function(price_range) {
if(grepl('-', price_range)) {
range <- strsplit(price_range, " - ")[[1]]
return((as.double(range[1]) + as.double(range[2])) / 2)
}
return (price_range)
}
names(selected_cpu_data)[names(selected_cpu_data) == "Launch_Date"] <- "Release_Date"
processed_cpu_data <- selected_cpu_data
processed_cpu_data$Release_Year <-
as.integer(sub("Q[1-4]'(\\d+)", "\\1",
gsub("\\s+", "", selected_cpu_data$Release_Date))) + 2000
processed_cpu_data$Release_Quarter <-
as.integer(sub("Q([1-4])'.*", "\\1",
gsub("\\s+", "", selected_cpu_data$Release_Date)))
processed_cpu_data$Recommended_Customer_Price <-
as.double(gsub("[\\$,]", "",
processed_cpu_data$Recommended_Customer_Price))
processed_cpu_data$Lithography <-
as.integer(gsub("nm", "",
processed_cpu_data$Lithography))
kable(head(processed_cpu_data), format = "html") %>%
kable_styling()
processed_cpu_data$Recommended_Customer_Price <-
as.double(gsub("[\\$,]", "",
processed_cpu_data$Recommended_Customer_Price))
month_to_quarter <- function(month) {
quarter <- switch(month,
"Jan" = "1",
"Feb" = "1",
"Mar" = "1",
"Apr" = "2",
"May" = "2",
"Jun" = "2",
"Jul" = "3",
"Aug" = "3",
"Sep" = "3",
"Oct" = "4",
"Nov" = "4",
"Dec" = "4",
"Unknown")
return(quarter)
}
recommended_price <- function(price_range) {
if(grepl('-', price_range)) {
range <- strsplit(price_range, " - ")[[1]]
return((as.double(range[1]) + as.double(range[2])) / 2)
}
return (price_range)
}
names(selected_cpu_data)[names(selected_cpu_data) == "Launch_Date"] <- "Release_Date"
processed_cpu_data <- selected_cpu_data
processed_cpu_data$Release_Year <-
as.integer(sub("Q[1-4]'(\\d+)", "\\1",
gsub("\\s+", "", selected_cpu_data$Release_Date)))
processed_cpu_data$Release_Year <-
ifelse(processed_cpu_data$Release_Year > 60,
1900 + processed_cpu_data$Release_Year,
2000 + processed_cpu_data$Release_Year)
processed_cpu_data$Release_Quarter <-
as.integer(sub("Q([1-4])'.*", "\\1",
gsub("\\s+", "", selected_cpu_data$Release_Date)))
processed_cpu_data$Recommended_Customer_Price <-
as.double(gsub("[\\$,]", "",
processed_cpu_data$Recommended_Customer_Price))
processed_cpu_data$Lithography <-
as.integer(gsub("nm", "",
processed_cpu_data$Lithography))
kable(head(processed_cpu_data), format = "html") %>%
kable_styling()
names(selected_cpu_data)[names(selected_cpu_data) == "Launch_Date"] <- "Release_Date"
processed_cpu_data <- selected_cpu_data
processed_cpu_data$Release_Year <-
as.integer(sub("Q[1-4]'(\\d+)", "\\1",
gsub("\\s+", "", selected_cpu_data$Release_Date)))
processed_cpu_data$Release_Year <-
ifelse(processed_cpu_data$Release_Year > 60,
1900 + processed_cpu_data$Release_Year,
2000 + processed_cpu_data$Release_Year)
processed_cpu_data$Release_Quarter <-
as.integer(sub("Q([1-4])'.*", "\\1",
gsub("\\s+", "", selected_cpu_data$Release_Date)))
processed_cpu_data <- processed_cpu_data %>%
mutate(
Recommended_Customer_Price = as.double(sapply(gsub("[\\$,]", "", Recommended_Customer_Price), recommended_price))
)
