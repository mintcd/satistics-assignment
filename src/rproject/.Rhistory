cpu_data <- read.csv("Intel_CPUs.csv")
View(cpu_data)
View(cpu_data)
column_names <- names(cpu_data)
descriptions <- lapply(column_names, function(col) {
attr(cpu_data[[col]], "description")
})
column_info <- data.frame(Column = column_names, Description = unlist(descriptions))
View(descriptions)
del descriptions
rm(descriptions)
products = cpu_data$Product_Collection
unique(products)
count(unique(products))
count(cpu_data)
count(cpu_data)
library(dplyr)
count(cpu_data)
library(dplyr)
library(dplyr)
source(utils.R)
source("utils.R")
results <- extract_tier_and_generation(products)
results
View(results)
View(extract_tier_and_generation)
result_list <- lapply(product_collections, extract_tier_and_generation)
result_list <- lapply(products, extract_tier_and_generation)
View(result_list)
result_list[[1]]
result_list[[31]]
cpu_data <- read.csv("dataset/Intel_CPUs.csv")
gpu_data <- read.csv("dataset/All_GPUs.csv")
gpu_data <- read.csv("dataset/All_GPUs.csv")
products[1]
products[2]
pattern = "[0-9]+(st|nd|rd|th) Generation Intel® Core™ i[3,5,7,9] Processors"
matched_products <- grep(pattern, products, value = TRUE)
matched_products
result_list <- lapply(matched_products, extract_tier_and_generation)
View(result_list)
View(results)
View(result_list)
rm(results)
View(result_list)
View(result_list)
# Custom comparison function
compare_function <- function(obj1, obj2) {
if (obj1$tier == obj2$tier) {
return(as.numeric(gsub("[^0-9]", "", obj1$generation)) - as.numeric(gsub("[^0-9]", "", obj2$generation)))
} else {
return(match(obj1$tier, c("i3", "i5", "i7", "i9")) - match(obj2$tier, c("i3", "i5", "i7", "i9")))
}
}
# Sort the list of objects
sorted_indices <- order(sapply(result_list, function(x) x$tier),
sapply(result_list, function(x) x$generation),
FUN = compare_function)
# Sort the list of objects
sorted_indices <- order(sapply(result_list, function(x) x$tier),
sapply(result_list, function(x) x$generation))
sorted_list <- result_list[sorted_indices]
View(sorted_list)
View(cpu_data)
i3_4th = products[grepl("4th Generation Intel® Core™ i3 Processors", products$Product_Collection)]
i3_4th = grepl("4th Generation Intel® Core™ i3 Processors", products$Product_Collection)
filtered_instances <- subset(products, grepl("4th Generation Intel® Core™ i3 Processors", Product_Collection))
i3_4th <- grepl("4th Generation Intel® Core™ i3 Processors", products$Product_Collection)
i3_4th <- products[grepl("4th Generation Intel® Core™ i3 Processors", products$Product_Collection)]
i3_4th <- subset(cpu_data, Product_Collection == "4th Generation Intel® Core™ i3 Processors")
View(i3_4th)
View(i3_4th)
sorted_on_release <- cpu_data[order(cpu_data$Release_Date), ]
sorted_on_release <- cpu_data[order(cpu_data$Launch_Date), ]
View(sorted_on_release)
View(sorted_on_release)
# Extracting quarter and year
quarters <- substring(cpu_data$Release_Date, 2, 2)
years <- as.integer(substring(cpu_data$Release_Date, 4, 5)) + 2000
# Creating a new column to store the release year and quarter
cpu_data$Release_Year <- years
# Extracting quarter and year
quarters <- substring(cpu_data$Launch_Date, 2, 2)
years <- as.integer(substring(cpu_data$Launch_Date, 4, 5)) + 2000
# Creating a new column to store the release year and quarter
cpu_data$Launch_Year <- years
cpu_data$Launch_Quarter <- quarters
# Converting quarter to numeric for proper sorting
quarter_numeric <- c("Q1" = 1, "Q2" = 2, "Q3" = 3, "Q4" = 4)
cpu_data$Release_Quarter <- quarter_numeric[cpu_data$Release_Quarter]
# Extracting quarter and year
quarters <- substring(cpu_data$Launch_Date, 2, 2)
years <- as.integer(substring(cpu_data$Launch_Date, 4, 5)) + 2000
# Creating a new column to store the release year and quarter
cpu_data$Launch_Year <- years
cpu_data$Launch_Quarter <- quarters
# Converting quarter to numeric for proper sorting
quarter_numeric <- c("Q1" = 1, "Q2" = 2, "Q3" = 3, "Q4" = 4)
cpu_data$Launch_Quarter <- quarter_numeric[cpu_data$Launch_Quarter]
# Sorting the dataset by release year and quarter
sorted_on_release <- cpu_data[order(cpu_data$Launch_Year, cpu_data$Launch_Quarter), ]
View(sorted_on_release)
View(sorted_on_release)
quarters
# Extracting quarter and year
quarters <- as.integer(substring(cpu_data$Launch_Date, 2, 2))
years <- as.integer(substring(cpu_data$Launch_Date, 4, 5)) + 2000
# Creating a new column to store the release year and quarter
cpu_data$Launch_Year <- years
cpu_data$Launch_Quarter <- quarters
quarter_numeric <- c("Q1" = 1, "Q2" = 2, "Q3" = 3, "Q4" = 4)
cpu_data$Launch_Quarter <- quarters
# Sorting the dataset by release year and quarter
sorted_on_release <- cpu_data[order(cpu_data$Launch_Year, cpu_data$Launch_Quarter), ]
View(sorted_on_release)
View(sorted_on_release)
unique_collections = unique(cpu_data$Product_Collection)
length(unique_collections)
unique_collections
# Libraries and options
library(dplyr)
library(here)
library(knitr)
library(kableExtra)
# Self-defined functions
source("utils.R")
# Working directory
setwd(here())
# Read the CSV file into a data frame
cpu_data <- read.csv("dataset/Intel_CPUs.csv")
gpu_data <- read.csv("dataset/All_GPUs.csv")
# Inspect the cpu data
kable(head(cpu_data), format = "html") %>%
kable_styling()
cpu_columns <- colnames(cpu_data)
cpu_columns
num_cpu <- count(cpu_data)
num_cpu
cpu_instance <- cpu_data[1, ]
cpu_instance
collection <- extract_tier_and_generation(cpu_instance$Product_Collection)
collection
cpu_columns <- colnames(cpu_data)
cpu_columns
cpu_data$Processor_Number
count(cpu_data)-count(unique(cpu_data[, c(Product_Collection, Processor_Number)]))
two_columns <- cpu_data[, c("Product_Collection", "Processor_Number")]
count(cpu_data)-count(unique(cpu_data[, c("Product_Collection", "Processor_Number")]))
count(cpu_data)-count(unique(cpu_data[, c("Product_Collection", "Processor_Number")]))
1+2
count(cpu_data)-count(unique(cpu_data[, c("Product_Collection", "Processor_Number")]))
count(cpu_data)-count(cpu_data[, c("Product_Collection", "Processor_Number")])
difference <- nrow(cpu_data) - nrow(unique(cpu_data[, c("Product_Collection", "Processor_Number")]))
difference
nrow(cpu_data)
nrow(unique(cpu_data[, c("Product_Collection", "Processor_Number")]))
nrow(unique(cpu_data[, c("Product_Collection", "Launch_Date")]))
# Find duplicated instances based on "Product_Collection" and "Processor_Number"
duplicated_instances <- cpu_data[duplicated(cpu_data[, c("Product_Collection", "Processor_Number")]), ]
# Print duplicated instances
print(duplicated_instances)
cpu_data$Processor_Number
unique(nrows(cpu_data$Product_Collection))
unique(cpu_data$Product_Collection)
CPU_collections = unique(cpu_data$Product_Collection)
count(CPU_collections)
cpu_collections = unique(cpu_data$Product_Collection)
count(CPU_collections)
cpu_collections = unique(cpu_data$Product_Collection)
count(CPU_collections)
cpu_collections <- unique(cpu_data$Product_Collection)
table(cpu_collections)
cpu_collections <- table(unique(cpu_data$Product_Collection))
count(cpu_collections)
cpu_collections <- unique(cpu_data$Product_Collection)
length(cpu_collections)
cpu_collections <- unique(cpu_data$Product_Collection)
length(cpu_collections)
cpu_collections <- unique(cpu_data$Product_Collection)
length(cpu_collections)
cpu_columns <- colnames(cpu_data)
cpu_columns
difference <- nrow(cpu_data) - nrow(unique(cpu_data[, c("Product_Collection", "Vertical_Segment")]))
difference
difference <- nrow(cpu_data) - nrow(unique(cpu_data[, c("Product_Collection", "Processor_Number", "Vertical_Segment")]))
difference
difference <- nrow(cpu_data) - nrow(unique(cpu_data[, c("Product_Collection", "Processor_Number", "Launch_Date")]))
difference
difference <- nrow(cpu_data) - nrow(unique(cpu_data[, c("Product_Collection", "Processor_Number", "Launch_Date", "Vertical_Segment")]))
difference
difference <- nrow(cpu_data) - nrow(unique(cpu_data[, c("Product_Collection", "Bus_Speed")]))
difference
difference <- nrow(cpu_data) - nrow(unique(cpu_data[, c("Product_Collection", "nb_of_Cores")]))
difference
# Inspect the CPU data
kable(head(cpu_data), format = "html") %>%
kable_styling()
sum(is.na(cpu_data$Processor_Number))
count(is.na(cpu_data$Processor_Number))
length(is.na(cpu_data$Processor_Number))
cpu_data$Processor_Number
length(is.na(cpu_data$Product_Collection))
is.na(cpu_data$Product_Collection)
> sum(is.na(cpu_data$Processor_Number))
> sum(is.na(cpu_data$Processor_Number))
sum(is.na(cpu_data$Processor_Number))
sum(nchar(cpu_data$Processor_Number) == 0)
difference <- nrow(cpu_data) - nrow(unique(cpu_data[, c("Product_Collection", "Processor_Number")]))
difference
duplicated_instances <- cpu_data[duplicated(cpu_data[, c("Product_Collection", "Processor_Number")]), ]
View(duplicated_instances)
legacy_pentium_instances <- cpu_data[cpu_data$Product_Collection == "Legacy Intel® Pentium® Processor", ]
View(legacy_pentium_instances)
duplicated_legacy_pentium_instances  <- legacy_pentium_instances [duplicated(cpu_data[, c("Product_Collection", "Processor_Number")]), ]
View(duplicated_legacy_pentium_instances)
grouped_legacy_pentium_instances <- legacy_pentium_instances %>%
group_by(Product_Collection, Processor_Number) %>%
filter(duplicated(Processor_Number)) %>%
ungroup()
View(grouped_legacy_pentium_instances)
> grouped_instances <- cpu_data %>%
grouped_instances <- cpu_data %>%
+     group_by(Product_Collection, Processor_Number) %>%
+     filter(duplicated(Processor_Number)) %>%
+     ungroup()
grouped_legacy_pentium_instances <- legacy_pentium_instances %>%
+     group_by(Product_Collection, Processor_Number) %>%
+     filter(duplicated(Processor_Number)) %>%
+     ungroup()
grouped_instances <- cpu_data %>%
+     group_by("Product_Collection", "Processor_Number") %>%
+     filter(duplicated("Processor_Number")) %>%
+     ungroup()
grouped_instances <- cpu_data %>%
+     group_by(Product_Collection, Processor_Number) %>%
+     filter(duplicated(Processor_Number)) %>%
+     ungroup()
grouped_duplicates <- legacy_pentium_instances %>%
group_by(Product_Collection, Processor_Number) %>%
filter(duplicated(Processor_Number)) %>%
ungroup()
grouped_duplicates <- cpu_data %>%
group_by(Product_Collection, Processor_Number) %>%
filter(duplicated(Processor_Number)) %>%
ungroup()
View(duplicated_instances)
difference <- nrow(cpu_data) - nrow(unique(cpu_data[, c("Product_Collection", "Vertical_Segment", "Processor_Number")]))
difference
difference <- nrow(cpu_data) - nrow(unique(cpu_data[, c("Product_Collection", "Vertical_Segment", "Processor_Number", "Launch_Date")]))
difference
price_available = sum(!is.na(cpu_data$Recommended_Customer_Price))
price_available
cpu_data$Recommended_Customer_Price
price_available = sum(cpu_data$Recommended_Customer_Price !== "N/A")
price_available = sum(cpu_data$Recommended_Customer_Price != "N/A")
price_available
price_available_cpu_data <- cpu_data$Recommended_Customer_Price != "N/A"
price_available_cpu_data <- cpu_data[Recommended_Customer_Price != "N/A"]
filtered_cpu_data <- cpu_data[complete.cases(cpu_data$Recommended_Customer_Price), ]
price_available_cpu_data <-cpu_data[cpu_data$Recommended_Customer_Price != "N/A", ]
View(price_available_cpu_data)
price_available_cpu_data$Conflict_Free
price_available_cpu_data[price_available_cpu_data$Conflict_Free != "", ]
sum(price_available_cpu_data[price_available_cpu_data$Conflict_Free != "", ])
count(price_available_cpu_data[price_available_cpu_data$Conflict_Free != "", ])
count(price_available_cpu_data[price_available_cpu_data$Lithography != "", ])
filtered_price_available_cpu_data <- price_available_cpu_data %>%
filter_all(any_vars(. != ""))
View(filtered_cpu_data)
View(filtered_price_available_cpu_data)
filtered_price_available_cpu_data <- price_available_cpu_data[any_vars(. != "")]
filtered_cpu_data <- cpu_data %>%
filter_all(all_vars(!is.na(.) & . != ""))
View(filtered_cpu_data)
filtered_cpu_data <- cpu_data %>%
filter_all(all_vars(!= ""))
filtered_cpu_data <- cpu_data %>%
filter_all(all_vars(!= ""))
filtered_cpu_data <- cpu_data %>%
filter_all(all_vars(.!= ""))
filtered_price_available_cpu_data <- price_available_cpu_data[rowSums(price_available_cpu_data == "") == 0]
filtered_price_available_cpu_data  <- price_available_cpu_data[apply(price_available_cpu_data, 1, function(row) !any(row == "")), ]
View(filtered_price_available_cpu_data)
View(filtered_price_available_cpu_data)
View(filtered_cpu_data)
View(price_available_cpu_data)
price_available_cpu_data_properties <-price_available_cpu_data["Recommended_Customer_Price"]
View(price_available_cpu_data_properties)
View(filtered_cpu_data)
View(grouped_duplicates)
View(collection)
rm(result_list)
rm(i3_4th)
# Inspect the CPU data
kable(head(cpu_data), format = "html") %>%
kable_styling()
cpu_columns <- colnames(cpu_data)
cpu_columns
price_available_cpu_data <-cpu_data[cpu_data$Recommended_Customer_Price != "N/A", ]
price_available_cpu_data_properties <-price_available_cpu_data["Recommended_Customer_Price", "Processor_Number", "nb_of_Cores"]
price_available_cpu_data_properties <- price_available_cpu_data[, c("Recommended_Customer_Price", "Processor_Number", "nb_of_Cores")]
price_available_cpu_data_chosen_columns <- price_available_cpu_data[, c("Recommended_Customer_Price", "Processor_Number", "nb_of_Cores")]
filtered_price_available_cpu_data_chosen_columns <- price_available_cpu_data_chosen_columns[apply(price_available_cpu_data_chosen_columns), ]
filtered_price_available_cpu_data_chosen_columns  <- price_available_cpu_data_chosen_columns[apply(price_available_cpu_data_chosen_columns, 1, function(row) !any(row == "")), ]
View(filtered_price_available_cpu_data_chosen_columns)
colnames(cpu_data)
price_available_cpu_data <-cpu_data[cpu_data$Recommended_Customer_Price != "N/A", ]
price_available_cpu_data_chosen_columns <- price_available_cpu_data[, c("Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency")]
filtered_price_available_cpu_data_chosen_columns  <- price_available_cpu_data_chosen_columns[apply(price_available_cpu_data_chosen_columns, 1, function(row) !any(row == "")), ]
price_available_cpu_data <-cpu_data[cpu_data$Recommended_Customer_Price != "N/A", ]
price_available_cpu_data_chosen_columns <- price_available_cpu_data[, c("Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Bus_Speed")]
filtered_price_available_cpu_data_chosen_columns  <- price_available_cpu_data_chosen_columns[apply(price_available_cpu_data_chosen_columns, 1, function(row) !any(row == "")), ]
View(filtered_price_available_cpu_data_chosen_columns)
View(filtered_price_available_cpu_data_chosen_columns)
price_available_cpu_data <-
cpu_data[cpu_data$Recommended_Customer_Price != "N/A"
&& !is.na(cpu_data$Recommended_Customer_Price)]
price_available_cpu_data <-
cpu_data[cpu_data$Recommended_Customer_Price != "N/A"
& !is.na(cpu_data$Recommended_Customer_Price), ]
price_available_cpu_data_chosen_columns <- price_available_cpu_data[, c("Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Bus_Speed")]
filtered_price_available_cpu_data_chosen_columns  <- price_available_cpu_data_chosen_columns[apply(price_available_cpu_data_chosen_columns, 1, function(row) !any(row == "")), ]
View(filtered_price_available_cpu_data_chosen_columns)
price_available_cpu_data <-
cpu_data[grepl("^\\$", cpu_data$Recommended_Customer_Price), ]
price_available_cpu_data_chosen_columns <- price_available_cpu_data[, c("Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Bus_Speed")]
filtered_price_available_cpu_data_chosen_columns  <- price_available_cpu_data_chosen_columns[apply(price_available_cpu_data_chosen_columns, 1, function(row) !any(row == "")), ]
View(price_available_cpu_data)
price_available_cpu_data <-
cpu_data[grepl("^\\$", cpu_data$Recommended_Customer_Price), ]
price_available_cpu_data_chosen_columns <- price_available_cpu_data[, c("Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Bus_Speed")]
View(price_available_cpu_data_chosen_columns)
price_available_cpu_data <-
cpu_data[grepl("^\\$", cpu_data$Recommended_Customer_Price), ]
price_available_cpu_data_chosen_columns <- price_available_cpu_data[, c("Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Bus_Speed")]
filtered_price_available_cpu_data_chosen_columns <-
price_available_cpu_data_chosen_columns[
apply(price_available_cpu_data_chosen_columns, 1, function(row) !any(row == "" & is.na(row))), ]
View(filtered_price_available_cpu_data_chosen_columns)
# Libraries and options
library(dplyr)
library(here)
library(knitr)
library(kableExtra)
# Self-defined functions
source("utils.R")
# Working directory
setwd(here())
filtered_price_available_cpu_data_chosen_columns <- price_available_cpu_data_chosen_columns[sapply(row, is_valid)]
filtered_price_available_cpu_data_chosen_columns <- price_available_cpu_data_chosen_columns[apply(price_available_cpu_data_chosen_columns, 1, function(row) all(sapply(row, is_valid))), ]
View(filtered_price_available_cpu_data_chosen_columns)
selected_cpu_data <- cpu_data[, c("Recommended_Customer_Price",
"nb_of_Cores",
"nb_of_Threads",
"Processor_Base_Frequency",
"Bus_Speed")]
processed_cpu_data <-
selected_cpu_data[
apply(selected_cpu_data, 1, function(row) all(sapply(row, is_valid))), ]
View(processed_cpu_data)
# Libraries and options
library(dplyr)
library(here)
library(knitr)
library(kableExtra)
# Self-defined functions
source("utils.R")
# Working directory
setwd(here())
# Read the CSV file into a data frame
cpu_data <- read.csv("dataset/Intel_CPUs.csv")
gpu_data <- read.csv("dataset/All_GPUs.csv")
# Inspect the CPU data
kable(head(cpu_data), format = "html") %>%
kable_styling()
